@using gitskills.Models
@inject StateContainer StateContainer
@implements IDisposable

@page "/github"

<h3>Organization Info</h3>

@if (StateContainer.isLoading)
{
    <p><em>@LoadingMessage</em></p>
}
else
{
    if (!isError)
    {
        <p><strong>Org name: </strong>@name</p>
    }
}

@if (isError)
{
    <p><strong>Error</strong></p>
    <p>@errorMessage</p>
    <p>Stack trace:</p>
    <p>@stacktrace</p>
}

@code {

    private GithubService githubService;

    private bool isError { get; set; } = false;
    private string errorMessage = "";
    string name = "";

    public string LoadingMessage { get; set; } = "Loading organization information from GitHub...";

    string stacktrace = "";

    protected override async Task OnInitializedAsync()
    {
        StateContainer.OnChange += StateHasChanged;

        StateContainer.SetLoading(true);

        try
        {
            githubService = new GithubService("005748d0ebf8d93fda5d4b36fab73f48fa4b5207");

            var result = await githubService.GetOrgQuery("sswconsulting");

            StateContainer.SetLoading(false);

            name = result.Name;
        }
        catch (Exception ex)
        {
            StateContainer.SetLoading(false);
            isError = true;
            errorMessage = ex.Message;
            stacktrace = ex.StackTrace;
        }
    }

    private async Task Init()
    {
        
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
