<BarChart @ref="barChart" TItem="int" />

@code{
    BarChart<int> barChart;

    private List<BarChartDataset<int>> datasets;
    
    [Parameter]
    public List<string> Labels { get; set; }

    [Parameter]
    public EventCallback<List<string>> LabelsChanged { get; set; }

    private async Task OnLabelsChanged(ChangeEventArgs e)
    {
        var theList = e.Value as List<string>;
        Labels = theList;
        await LabelsChanged.InvokeAsync(Labels);
    }

    /* [Parameter]
    public List<int> Values { get; set; } = new List<int>();
    
    [Parameter]
    public EventCallback<List<int>> ValuesChanged { get; set; }
    
    private async Task OnValuesChanged(ChangeEventArgs e)
    {
        var theList = e.Value as List<int>;
        Values = theList;
        await ValuesChanged.InvokeAsync(Values);
    } */

    public void AddSeries (string Label, List<int> Values)
    {
        SeedChartColors(Values.Count);

        var ds = new BarChartDataset<int>
        {
            Label = Label,
            Data = Values,
            BackgroundColor = backgroundColors,
            BorderColor = borderColors
        };

        datasets.Add(ds);
        //barChart.AddDataSet(ds);
        HandleRedraw();
    }

    List<string> borderColors { get; set; }
    List<string> backgroundColors { get; set; }

    public async Task RedrawChart()
    {
        await HandleRedraw();
    }

    async Task HandleRedraw()
    {
        await barChart.Clear();

        await barChart.AddLabelsDatasetsAndUpdate( GetChartLabels(), datasets.ToArray() );        
    }

    /*List<int> GetChartData()
    {
        return Values;
    }*/

    string[] GetChartLabels()
    {
        return Labels.ToArray();
    }

    void SeedChartColors(int count)
    {
        var r = new Random( DateTime.Now.Millisecond );

        backgroundColors = new List<string> ();
        
        borderColors = new List<string>();

        for(int i = 0; i < count; i++ )
        {
            var r1 = Convert.ToByte(r.Next(0, 255));
            var r2 = Convert.ToByte(r.Next(0, 255));
            var r3 = Convert.ToByte(r.Next(0, 255));

            var backCol = ChartColor.FromRgba(r1, r2, r3, 0.2f);
            var borderCol = ChartColor.FromRgba(r1, r2, r3, 1f);

            backgroundColors.Add(backCol);
            borderColors.Add(borderCol);
        }
    }
}