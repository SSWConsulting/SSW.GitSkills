@using gitskills.Models
@using gitskills.Components
@inject StateContainer StateContainer
@inject GithubService githubService
@implements IDisposable
@using System.Collections.ObjectModel

@page "/github"

<h3>Organization Info</h3>
@if (StateContainer.isLoading)
{
    <p><em>@LoadingMessage</em></p>
}
else
{
    if (!isError)
    {
        <p><strong>Org name: </strong>@name</p>

        <Accordion>
            <Collapse Visible="@languagesVisible">
                <CollapseHeader>
                    <Heading Size="HeadingSize.Is5">
                        <Button Clicked="@(()=> languagesVisible = !languagesVisible)">Languages</Button>
                    </Heading>
                </CollapseHeader>
                <CollapseBody class="badge-container">
                <div class="badge-container">
                    @foreach (var lang in Languages)
                    {
                        <Button Color="Color.Primary" Clicked="@(() => UpdateChart(@lang))" style="margin: 5px;">@lang</Button>
                        @Environment.NewLine;
                    }
                </div>
                </CollapseBody>
            </Collapse>
            <Collapse Visible="@topicsVisible">
                <CollapseHeader>
                    <Heading Size="HeadingSize.Is5">
                        <Button Clicked="@(()=> topicsVisible = !topicsVisible)">Topics</Button>
                    </Heading>
                </CollapseHeader>
                <CollapseBody class="badge-container">
                <div class="badge-container">
                    @foreach (var topic in Topics)
                    {
                        <Button Color="Color.Primary" Clicked="@(()=> UpdateChart(@topic))" style="margin: 5px;">@topic</Button>
                        @Environment.NewLine;
                    }
                </div>
                </CollapseBody>
            </Collapse>
        </Accordion>

        <p class="skill-title">Selected skill: @selectedSkill</p>
        <div class="chart-area">
            <Piechart @bind-Labels="Labels" @bind-Values="skillCount" @ref="skillsChart"></Piechart>
        </div>
    }
}


<Snackbar @ref="snackbarError" Color="SnackbarColor.Danger">
    <SnackbarBody>
        <p>@errorMessage</p>
        <p>Please reload the page to try again</p>
    </SnackbarBody>
</Snackbar>

@code {

    private bool isError { get; set; } = false;
    private string errorMessage = "";
    string name = "";

    public ObservableCollection<string> Languages { get; set; } = new ObservableCollection<string>();
    public ObservableCollection<string> Topics { get; set; } = new ObservableCollection<string>();

    public string LoadingMessage { get; set; } = "Loading organization information from GitHub...";

    string stacktrace = "";

    public bool languagesVisible { get; set; } = false;
    public bool topicsVisible { get; set; } = false;

    public List<string> Labels {get;set;} = new List<string>();

    public List<int> skillCount = new List<int>();
    Snackbar snackbarError;

    string selectedSkill;

    Piechart skillsChart;

    protected override async Task OnInitializedAsync()
    {
        StateContainer.OnChange += StateHasChanged;

        StateContainer.SetLoading(true);

        try
        {
            // TODO: get organization from configuration or from the user and store in local storage
            var result = await githubService.GetOrgQuery("sswconsulting");

            StateContainer.SetLoading(false);

            foreach(var lang in githubService.Languages)
            {
                Languages.Add(lang);
            }

            foreach(var topic in githubService.Topics)
            {
                Topics.Add(topic);
            }

            name = result.Name;

            SeedValues();
        }
        catch (Exception ex)
        {
            StateContainer.SetLoading(false);
            isError = true;
            errorMessage = ex.Message;
            stacktrace = ex.StackTrace;
            snackbarError.Show();
        }
    }

    void SeedValues()
    {
        Labels = new List<string>();
        skillCount = new List<int>();

        var userList = githubService.Users
            .Where(u => u.Skills.Where(s => s.Tech == selectedSkill).Any())
            .ToList();

        userList.ForEach(u => 
        {
            Labels.Add(u.Name);
            int skill = u.Skills
                .Where(s => s.Tech == selectedSkill)
                .Select(s => s.CommitCount)
                .Sum();
            
            skillCount.Add(skill);
        });
    }

    async Task UpdateChart(string skill)
    {
        selectedSkill = skill;
        SeedValues();
        await skillsChart.RedrawChart();
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
